====944: 0.666666666556 ====
def tensor3(name=None, dtype=None): DCNL  DCSP if (dtype is None): DCNL DCSP  DCSP dtype = config.floatX DCNL DCSP type = CudaNdarrayType(dtype=dtype, broadcastable=(False, False, False)) DCNL DCSP return type(name)

def tensor3(name=None, dtype=None):
    if (dtype is None):
        dtype = config.floatX
    type = CudaNdarrayType(dtype=dtype, broadcastable=(False, False, False))
    return type(name)

gts: [' return a symbolic 3-d variable .']
pre1: [' yaml']
pre2: [' a decorator that returns a new class that will return a new class name .']
pre3: [' helper function for #4957 .']
pre4: [' return the path to the currently running server .']
pre5: [' return a symbolic graph .']

====3911: 0.749999999625 ====
def disconnectMsToNet(Facility_presence=0, UserUser_presence=0, SsVersionIndicator_presence=0): DCNL  DCSP a = TpPd(pd=3) DCNL DCSP b = MessageType(mesType=37) DCNL DCSP c = Cause() DCNL DCSP packet = ((a / b) / c) DCNL DCSP if (Facility_presence is 1): DCNL DCSP  DCSP d = FacilityHdr(ieiF=28, eightBitF=0) DCNL DCSP  DCSP packet = (packet / d) DCNL DCSP if (UserUser_presence is 1): DCNL DCSP  DCSP e = UserUserHdr(ieiUU=126, eightBitUU=0) DCNL DCSP  DCSP packet = (packet / e) DCNL DCSP if (SsVersionIndicator_presence is 1): DCNL DCSP  DCSP f = SsVersionIndicatorHdr(ieiSVI=127, eightBitSVI=0) DCNL DCSP  DCSP packet = (packet / f) DCNL DCSP return packet

gts: [' disconnect section 9 .']
pre1: [' return a list of all available services cli example']
pre2: [' decorator that checks the signature as a string .']
pre3: [' return a list of all configured architecture .']
pre4: [' release the result of graphs .']
pre5: [' release section 9 .']

====6694: 0.705401437174 ====
def _has_git(): DCNL  DCSP try: DCNL DCSP  DCSP subprocess.check_call(['git', '--version'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) DCNL DCSP except (OSError, subprocess.CalledProcessError): DCNL DCSP  DCSP return False DCNL DCSP else: DCNL DCSP  DCSP return True
def _has_git():
    try:
        subprocess.check_call(['git', '--version'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except (OSError, subprocess.CalledProcessError):
        return False
    else:
        return True

gts: [' check if git is installed .']
pre1: [' helper function to create a new figure manager instance .']
pre2: [' return true if the user has access to the specified resource .']
pre3: [' test that validate_folders throws a foldermissingerror .']
pre4: [' returns the number of git modules that are not installed .']
pre5: [' returns true if git is installed .']


====8210: 0.777777777605 ====
def getCarving(fileName=''): DCNL  DCSP if (fileName == ''): DCNL DCSP  DCSP return None DCNL DCSP stlData = archive.getFileText(fileName, True, 'rb') DCNL DCSP if (stlData == ''): DCNL DCSP  DCSP return None DCNL DCSP triangleMesh = triangle_mesh.TriangleMesh() DCNL DCSP vertexIndexTable = {} DCNL DCSP numberOfVertexStrings = stlData.count('vertex') DCNL DCSP requiredVertexStringsForText = max(2, (len(stlData) / 8000)) DCNL DCSP if (numberOfVertexStrings > requiredVertexStringsForText): DCNL DCSP  DCSP addFacesGivenText(stlData, triangleMesh, vertexIndexTable) DCNL DCSP else: DCNL DCSP  DCSP addFacesGivenBinary(stlData, triangleMesh, vertexIndexTable) DCNL DCSP return triangleMesh

gts: [' get the triangle mesh for the stl file .']
pre1: [' add faces from a given piece of data .']
pre2: [' given a list of lines .']
pre3: [' process the current process and write it to the current process object .']
pre4: [' get the file object for a given collection .']
pre5: [' get the triangle mesh for the given corpus .']


====13704: 0.749999999813 ====
@handle_response_format DCNL @treeio_login_required DCNL def messaging_delete(request, message_id, response_format='html'): DCNL  DCSP message = get_object_or_404(Message, pk=message_id) DCNL DCSP if (not request.user.profile.has_permission(message, mode='w')): DCNL DCSP  DCSP return user_denied(request, message="You DCSP don't DCSP have DCSP access DCSP to DCSP this DCSP Message", response_format=response_format) DCNL DCSP if request.POST: DCNL DCSP  DCSP if ('delete' in request.POST): DCNL DCSP  DCSP  DCSP if ('trash' in request.POST): DCNL DCSP  DCSP  DCSP  DCSP message.trash = True DCNL DCSP  DCSP  DCSP  DCSP message.save() DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP message.delete() DCNL DCSP  DCSP  DCSP return HttpResponseRedirect('/messaging/') DCNL DCSP  DCSP elif ('cancel' in request.POST): DCNL DCSP  DCSP  DCSP return HttpResponseRedirect(reverse('messaging_stream_view', args=[message.stream.id])) DCNL DCSP context = _get_default_context(request) DCNL DCSP context.update({'message': message}) DCNL DCSP return render_to_response('messaging/message_delete', context, context_instance=RequestContext(request), response_format=response_format)

gts: [' delete message page .']
pre1: [' return a list of all available services cli example']
pre2: [' returns a list of all the files that are followed by the user .']
pre3: [' evaluates the hyperbolic sine of an expression .']
pre4: [' return a message with the specified id .']
pre5: [' message delete .']


====16324: 0.777777777691 ====
def get_apache_configurator(config_path, vhost_path, config_dir, work_dir, version=(2, 4, 7), conf=None): DCNL  DCSP backups = os.path.join(work_dir, 'backups') DCNL DCSP mock_le_config = mock.MagicMock(apache_server_root=config_path, apache_vhost_root=vhost_path, apache_le_vhost_ext=constants.os_constant('le_vhost_ext'), apache_challenge_location=config_path, backup_dir=backups, config_dir=config_dir, temp_checkpoint_dir=os.path.join(work_dir, 'temp_checkpoints'), in_progress_dir=os.path.join(backups, 'IN_PROGRESS'), work_dir=work_dir) DCNL DCSP with mock.patch('certbot_apache.configurator.util.run_script'): DCNL DCSP  DCSP with mock.patch('certbot_apache.configurator.util.exe_exists') as mock_exe_exists: DCNL DCSP  DCSP  DCSP mock_exe_exists.return_value = True DCNL DCSP  DCSP  DCSP with mock.patch('certbot_apache.parser.ApacheParser.update_runtime_variables'): DCNL DCSP  DCSP  DCSP  DCSP config = configurator.ApacheConfigurator(config=mock_le_config, name='apache', version=version) DCNL DCSP  DCSP  DCSP  DCSP if (conf is not None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP config.conf = conf DCNL DCSP  DCSP  DCSP  DCSP config.prepare() DCNL DCSP return config
gts: [' create an apache configurator with the specified options .']
pre1: [' set the default colormap to summer and apply to current image if any .']
pre2: [' return a dict with names associated with key names .']
pre3: [' log an error message .']
pre4: [' create the appropriate instance for the specified file .']
pre5: [' create an nginx with the specified options .']



