====326: 0.749999999625 ==== 
 gts: [' removes a volume .'] 
 pre1: [' set the default colormap to summer and apply to current image if any .'] 
 pre2: [' return a sorted list of all the metasources .'] 
 pre3: [' load the files from a file .'] 
 pre4: [' constructs a volume type from a url .'] 
 pre5: [' attaches a volume .'] 
 ====944: 0.666666666556 ==== 
 gts: [' return a symbolic 3-d variable .'] 
 pre1: [' yaml'] 
 pre2: [' a decorator that returns a new class that will return a new class name .'] 
 pre3: [' helper function for #4957 .'] 
 pre4: [' return the path to the currently running server .'] 
 pre5: [' return a symbolic graph .'] 
 ====1310: 0.666666666222 ==== 
 gts: [' normalize string .'] 
 pre1: [' return a list of all available services cli example'] 
 pre2: [' test that the value is a valid integer .'] 
 pre3: [' return the first configured instance .'] 
 pre4: [' list all group types .'] 
 pre5: [' normalizes string .'] 
 ====1950: 0.714285714082 ==== 
 gts: [' return true if path has subdirectories .'] 
 pre1: [' return a list of all available vm sizes on the cloud provider .'] 
 pre2: [' get the list of all available services .'] 
 pre3: [' get the address of a socket .'] 
 pre4: [' return true if the given package is installed .'] 
 pre5: [' return true if path is installed .'] 
 ====2106: 0.833333333194 ==== 
 gts: [' same as a <unk> b .'] 
 pre1: [' return a list of all available services cli example'] 
 pre2: [' return the value of the given clauseelement .'] 
 pre3: [' returns the number of arg for a given width .'] 
 pre4: [' same as a &= b .'] 
 pre5: [' same as a b .'] 
 ====2358: 0.636363636306 ==== 
 gts: [' looks to see if zpool is present on the system .'] 
 pre1: [' this is a decorator that asserts that the decorated validator doesnt have been updated with the given arguments .'] 
 pre2: [' return the path of the ca variable of the specified path .'] 
 pre3: [' duck duck go to duck go out of duck probes .'] 
 pre4: [' check if the current user is present on the system .'] 
 pre5: [' looks to see if a refname is present .'] 
 ====3114: 0.624999999922 ==== 
 gts: [' <unk> -> 0 run command with arguments .'] 
 pre1: [' return a list of all available services cli example'] 
 pre2: [' return a list of all the possible classes that are in the specified order .'] 
 pre3: [' capitalize matched text .'] 
 pre4: [' return a function that will be used for a given command with a given value .'] 
 pre5: [' run command with arguments .'] 
 ====3502: 0.624999999844 ==== 
 gts: [' helper method to start the bottle server .'] 
 pre1: [' creates a new figure manager instance .'] 
 pre2: [' set the http server to use in order to make sure that the user has been reached .'] 
 pre3: [' return the current time zone .'] 
 pre4: [' helper method to run shared setup .'] 
 pre5: [' helper method to run bottle in twisted .'] 
 ====3593: 0.5367694949 ==== 
 gts: [' this is a really partial test .'] 
 pre1: [' return a list of all available services cli example'] 
 pre2: [' get the current folder and its contents .'] 
 pre3: [' returns a random string with random chars .'] 
 pre4: [' returns a new ticket configuration .'] 
 pre5: [' this is a decorator to keep the test .'] 
 ====3911: 0.749999999625 ==== 
 gts: [' disconnect section 9 .'] 
 pre1: [' return a list of all available services cli example'] 
 pre2: [' decorator that checks the signature as a string .'] 
 pre3: [' return a list of all configured architecture .'] 
 pre4: [' release the result of graphs .'] 
 pre5: [' release section 9 .'] 
 ====3921: 0.636363636306 ==== 
 gts: [' outputs the contents of a given file into the page .'] 
 pre1: [' test the behavior of --editable --uptodate --format=columns flag in the list command .'] 
 pre2: [' return true if the given page has been published in the page .'] 
 pre3: [' retrieves the number of bits on the given template and a context variable .'] 
 pre4: [' returns the contents of a file .'] 
 pre5: [' outputs the contents of the page .'] 
 ====5243: 0.749999999625 ==== 
 gts: [' unpublishes an collection .'] 
 pre1: [' adds the user to the given httpresponse object'] 
 pre2: [' escapes a string with the given arguments .'] 
 pre3: [' return a url with the url .'] 
 pre4: [' escapes a string to the given collection .'] 
 pre5: [' unpublicizes an collection .'] 
 ====6694: 0.705401437174 ==== 
 gts: [' check if git is installed .'] 
 pre1: [' helper function to create a new figure manager instance .'] 
 pre2: [' return true if the user has access to the specified resource .'] 
 pre3: [' test that validate_folders throws a foldermissingerror .'] 
 pre4: [' returns the number of git modules that are not installed .'] 
 pre5: [' returns true if git is installed .'] 
 ====7048: 0.666666666444 ==== 
 gts: [' parses a set implicit union .'] 
 pre1: [' set the default colormap to summer and apply to current image if any .'] 
 pre2: [' return a list of all available regions for the amazon app .'] 
 pre3: [' parses a list of indexes and return a list of make possible .'] 
 pre4: [' get a valid python source file .'] 
 pre5: [' parses a set of inline .'] 
 ====7631: 0.749999999625 ==== 
 gts: [' generate <unk> metadata .'] 
 pre1: [' generate pseudorandom nonce that is unlikely to repeat .'] 
 pre2: [' test loading of two channels .'] 
 pre3: [' reboot a vm .'] 
 pre4: [' generate kernel_arg_access_qual id .'] 
 pre5: [' generate kernel_arg_access_qual metadata .'] 
 ====8052: 0.59999999976 ==== 
 gts: [' read in a file .'] 
 pre1: [' returns a list of all available vm sizes on the cloud provider .'] 
 pre2: [' return the value of the given path .'] 
 pre3: [' generate a random message .'] 
 pre4: [' read the data from the file .'] 
 pre5: [' read the file path .'] 
 ====8210: 0.777777777605 ==== 
 gts: [' get the triangle mesh for the stl file .'] 
 pre1: [' add faces from a given piece of data .'] 
 pre2: [' given a list of lines .'] 
 pre3: [' process the current process and write it to the current process object .'] 
 pre4: [' get the file object for a given collection .'] 
 pre5: [' get the triangle mesh for the given corpus .'] 
 ====8543: 0.624999999844 ==== 
 gts: [' create the filter accept rule for metadata .'] 
 pre1: [' set up the libcloud functions and return the result of the given function .'] 
 pre2: [' helper function to create a fake subclass for a basic task .'] 
 pre3: [' build forwarding for forwarding .'] 
 pre4: [' helper function for defining rule types .'] 
 pre5: [' create forwarding rule for the specified ip .'] 
 ====8679: 0.59999999988 ==== 
 gts: [' measurement report section 9 .'] 
 pre1: [' return a list of all available services cli example'] 
 pre2: [' return a list of all available regions for the amazon opsworks service .'] 
 pre3: [' sets up and environment variables for the master .'] 
 pre4: [' launch the specified network interface .'] 
 pre5: [' request section 9 .'] 
 ====9501: 0.749999999625 ==== 
 gts: [' get all qos_specs .'] 
 pre1: [' this function takes a list of tuples and returns a list of tuples of the values in the given list of dictionaries .'] 
 pre2: [' retrieves all volumes belonging to a user .'] 
 pre3: [' run the given command .'] 
 pre4: [' get the repository record from user .'] 
 pre5: [' get all groups .'] 
 ====10607: 0.59999999988 ==== 
 gts: [' assignment failure section 9 .'] 
 pre1: [' return a list of all available services cli example'] 
 pre2: [' return the path to the current figure .'] 
 pre3: [' return the global log file name .'] 
 pre4: [' return the last configured channel .'] 
 pre5: [' request section 9 .'] 
 ====10637: 0.59999999976 ==== 
 gts: [' setup the influxdb component .'] 
 pre1: [' api'] 
 pre2: [' helper function for setting the default configuration file to use in a python api .'] 
 pre3: [' return a list of views from a list of urlpatterns .'] 
 pre4: [' used to connect to the current server .'] 
 pre5: [' setup the pushbullet platform .'] 
 ====10895: 0.666666666556 ==== 
 gts: [' return for path using hashlib .'] 
 pre1: [' return a list of all available services cli example'] 
 pre2: [' format the signature of self .'] 
 pre3: [' return the name of the current thread .'] 
 pre4: [' return the path for the specified video .'] 
 pre5: [' return path for path .'] 
 ====11157: 0.705401437174 ==== 
 gts: [' writes a file to disk .'] 
 pre1: [' return a list of all available vm sizes on the cloud provider .'] 
 pre2: [' return a generator that can be used to mark a function as a deprecated .'] 
 pre3: [' executes a single task .'] 
 pre4: [' encode a file to a file .'] 
 pre5: [' writes a file to a file .'] 
 ====11228: 0.633386192498 ==== 
 gts: [' get individual addresses for every cell in a range .'] 
 pre1: [' returns the number of cpus in the system .'] 
 pre2: [' get response for a rack .'] 
 pre3: [' get a range of cell addresses in a range of boundaries'] 
 pre4: [' get a range of all attributes for every range in range .'] 
 pre5: [' get a range of all cell addresses for a range .'] 
 ====11947: 0.584100587012 ==== 
 gts: [' initializes the database .'] 
 pre1: [' get the list of all available regions for the amazon dynamodb service .'] 
 pre2: [' creates a new database and return its appropriate instance .'] 
 pre3: [' convert a string to a number .'] 
 pre4: [' saves pillar and saves the database .'] 
 pre5: [' setup the communication database .'] 
 ====12028: 0.636363636306 ==== 
 gts: [' looks to see if <unk> is present on the system .'] 
 pre1: [' this is a decorator that asserts that the decorated validator doesnt have been updated with the given arguments .'] 
 pre2: [' return the path of the ca variable of the specified path .'] 
 pre3: [' return true if the value is a valid url .'] 
 pre4: [' check if the current user is present on the system .'] 
 pre5: [' looks to see if a refname is present .'] 
 ====12423: 0.557302130322 ==== 
 gts: [' returns a pep 386-compliant version number from version .'] 
 pre1: [' returns a boolean indicating whether the given object is a valid ipv4 address .'] 
 pre2: [' returns a boolean indicating whether there are a valid pep 508 connection should be used .'] 
 pre3: [' delete a replication group from the given bucket name .'] 
 pre4: [' helper function for getting a pep 386-compliant version number from the salt master cli example'] 
 pre5: [' returns a pep 386-compliant version from the given salt version cli example'] 
 ====13180: 0.749999999813 ==== 
 gts: [' get the carving for the gts file .'] 
 pre1: [' return a list of all available services cli example'] 
 pre2: [' returns the course dialog .'] 
 pre3: [' add the radius to the radius .'] 
 pre4: [' get triangle mesh from the file .'] 
 pre5: [' get the triangle mesh for the file .'] 
 ====13701: 0.564321149739 ==== 
 gts: [' return a state error dictionary .'] 
 pre1: [' returns a list of all available vm sizes on the cloud provider .'] 
 pre2: [' gets the latest version of the user .'] 
 pre3: [' validates dictioanry of color(s) .'] 
 pre4: [' returns a slice of elements of the given axis .'] 
 pre5: [' return a dictionary of given metadata .'] 
 ====13704: 0.749999999813 ==== 
 gts: [' delete message page .'] 
 pre1: [' return a list of all available services cli example'] 
 pre2: [' returns a list of all the files that are followed by the user .'] 
 pre3: [' evaluates the hyperbolic sine of an expression .'] 
 pre4: [' return a message with the specified id .'] 
 pre5: [' message delete .'] 
 ====14364: 0.833333333056 ==== 
 gts: [' test subunit output with tags .'] 
 pre1: [' return true if the given object is a valid config .'] 
 pre2: [' return a list of available audio .'] 
 pre3: [' return image .'] 
 pre4: [' test subunit output to unicode .'] 
 pre5: [' test subunit output with unicode .'] 
 ====15902: 0.714285714082 ==== 
 gts: [' parse time from iso 8601 format .'] 
 pre1: [' decorator for views that checks that the user has a permission to be logged in .'] 
 pre2: [' test mne fit and sample routine with 0 .'] 
 pre3: [' create a virtualenv with the virtualenv .'] 
 pre4: [' parse an iso 8601 list .'] 
 pre5: [' parse time from iso 639-1 time .'] 
 ====16015: 0.571428571347 ==== 
 gts: [' read pillar data from http response .'] 
 pre1: [' return a list of all available services cli example'] 
 pre2: [' prints a dict of all methods on a specific server .'] 
 pre3: [' return a string with escape-backslashes converted to nulls .'] 
 pre4: [' test io for several operators .'] 
 pre5: [' read pillar data .'] 
 ====16071: 0.571428571347 ==== 
 gts: [' create permanent tables for osm data .'] 
 pre1: [' move useless image from src to dst .'] 
 pre2: [' convert data into a multiindex into a dictionary of data .'] 
 pre3: [' create an event .'] 
 pre4: [' check for osm jobs in coordinator .'] 
 pre5: [' update osm data from tables .'] 
 ====16324: 0.777777777691 ==== 
 gts: [' create an apache configurator with the specified options .'] 
 pre1: [' set the default colormap to summer and apply to current image if any .'] 
 pre2: [' return a dict with names associated with key names .'] 
 pre3: [' log an error message .'] 
 pre4: [' create the appropriate instance for the specified file .'] 
 pre5: [' create an nginx with the specified options .'] 
 ====17394: 0.59999999988 ==== 
 gts: [' identity request section 9 .'] 
 pre1: [' return a list of all available services cli example'] 
 pre2: [' return a list of all available regions for the amazon opsworks service .'] 
 pre3: [' convert a string to a string .'] 
 pre4: [' launch the specified network interface .'] 
 pre5: [' section 9 .'] 
 ====17710: 0.833333333194 ==== 
 gts: [' returns a process pool object .'] 
 pre1: [' return a list of all available vm sizes on the cloud provider .'] 
 pre2: [' returns the total number of cpus in the system .'] 
 pre3: [' returns a list of all elements in a given order .'] 
 pre4: [' returns a process object with the given id .'] 
 pre5: [' returns a process object .'] 
 ====18025: 0.59999999988 ==== 
 gts: [' remove file or directory .'] 
 pre1: [' return a list of all available services cli example'] 
 pre2: [' test the behavior of python and invalid features .'] 
 pre3: [' given two tp instances .'] 
 pre4: [' remove a test .'] 
 pre5: [' remove the file .'] 
 